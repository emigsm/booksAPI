<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
    <apikit:config name="Router" raml="booksApi.raml" consoleEnabled="true" consolePath="console" keepRamlBaseUri="false" doc:name="Router">
        <apikit:flow-mapping resource="/books" action="get" flow-ref="getBooksFlow"/>
        <apikit:flow-mapping resource="/books" action="post" content-type="application/json" flow-ref="postBooksFlow"/>
        <apikit:flow-mapping resource="/books/{bookId}" action="delete" flow-ref="deleteBookByIdFlow"/>
        <apikit:flow-mapping resource="/books/{bookId}" action="put" content-type="application/json" flow-ref="putBookByIdFlow"/>
    </apikit:config>
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/>
    <spring:beans>
        <spring:bean id="books" name="books" class="java.util.HashMap"/>
    </spring:beans>
    <flow name="booksapiFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/booksapi/*" doc:name="HTTP"/>
        <apikit:router config-ref="Router" doc:name="APIkit Router"/>
        <exception-strategy ref="exceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="getBooksFlow">
        <set-payload value="#[app.registry['books'].values()]" doc:name="Set Payload"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
(payload filter $.title == inboundProperties."http.query.params".title) when inboundProperties."http.query.params".title != null otherwise payload
]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <flow name="postBooksFlow">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
        <choice doc:name="Choice">
            <when expression="#[!app.registry['books'].containsKey(payload.id)]">
                <expression-component doc:name="Expression"><![CDATA[Object bookInstance = new com.mule.support.Book();
bookInstance.setTitle(payload.get('title'));
bookInstance.setAuthor(payload.get('author'));
bookInstance.setPages(payload.get('pages'));
bookInstance.setId(payload.get('id'));
app.registry['books'].put(payload.get('id'),bookInstance);]]></expression-component>
            </when>
            <otherwise>
                <set-payload value="{&quot;message&quot; : &quot;A book with the provided ID already exists&quot;}" doc:name="Set Payload" mimeType="application/json"/>
                <set-property propertyName="http.status" value="409" doc:name="Property"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="putBookByIdFlow">
        <choice doc:name="Choice">
            <when expression="#[app.registry['books'].containsKey(Integer.parseInt(message.inboundProperties['http.uri.params'].get('bookId')))]">
                <set-variable variableName="objectData" value="#[app.registry['books'].get(Integer.parseInt(message.inboundProperties['http.uri.params'].get('bookId')))]" doc:name="Variable"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	"id": flowVars.objectData.id,
	"author":payload.author when (payload.author != null) otherwise flowVars.objectData.author,
	"pages":payload.pages when (payload.pages != null) otherwise flowVars.objectData.pages,
	"title":payload.title when (payload.title != null) otherwise flowVars.objectData.title	
} as :object {class : "com.mule.support.Book"}

]]></dw:set-payload>
                </dw:transform-message>
                <expression-component doc:name="Expression"><![CDATA[app.registry['books'].put(payload.getId(),payload);]]></expression-component>
            </when>
            <otherwise>
                <set-payload value="{&quot;message&quot; : &quot;Unable to find a book with the desired ID&quot;}" doc:name="Set Payload" mimeType="application/json"/>
                <set-property propertyName="http.status" value="404" doc:name="Property"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="deleteBookByIdFlow">
        <choice doc:name="Choice">
            <when expression="#[app.registry['books'].containsKey(Integer.parseInt(message.inboundProperties['http.uri.params'].get('bookId')))]">
                <expression-component doc:name="Expression"><![CDATA[app.registry['books'].remove(Integer.parseInt(message.inboundProperties['http.uri.params'].get('bookId')));]]></expression-component>
            </when>
            <otherwise>
                <set-payload value="{&quot;message&quot; : &quot;Unable to find a book with the desired ID&quot;}" doc:name="Set Payload" mimeType="application/json"/>
                <set-property propertyName="http.status" value="404" doc:name="Property"/>
            </otherwise>
        </choice>
    </flow>
</mule>
